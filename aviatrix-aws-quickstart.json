{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
   "Parameters":
   {
     "VPCParam":
      {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "Select Your VPC"
      },
      "SubnetParam":
       {
         "Type": "AWS::EC2::Subnet::Id",
         "Description": "Select Subnet"
       },
     "AvailabilityZoneParam":
      {
        "Type": "AWS::EC2::AvailabilityZone::Name",
        "Default": "us-west-2a",
        "Description": "Select Availability Zone"
      },
     "KeyNameParam":
      {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description": "Select your Keypair"
      }
    },
   "Resources" : {
     "AviatrixRoleEC2" :
     {
        "Type": "AWS::IAM::Role",
        "Properties": {
           "RoleName": "aviatrix-role-ec2",
           "AssumeRolePolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [ {
                 "Effect": "Allow",
                 "Principal": {
                    "Service": [ "ec2.amazonaws.com" ]
                 },
                 "Action": [ "sts:AssumeRole" ]
              } ]
           },
           "Path": "/"
         }
     },
     "AviatrixRoleApp" :
     {
        "Type": "AWS::IAM::Role",
        "Properties": {
           "RoleName": "aviatrix-role-app",
           "AssumeRolePolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [ {
                 "Effect": "Allow",
                 "Principal": {
                    "AWS": [ { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" } , ":root" ] ] } ]
                 },
                 "Action": [ "sts:AssumeRole" ]
              } ]
           },
           "Path": "/",
         }
     },
     "CreateAviatrixAssumeRolePolicy" :
     {
        "Type" : "AWS::IAM::ManagedPolicy",
        "Properties" : {
          "ManagedPolicyName" : "aviatrix-assume-role-policy",
          "Description" : "Policy for creating aviatrix-assume-role-policy",
          "Path" : "/",
          "PolicyDocument" :
            {
               "Version": "2012-10-17",
               "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "iam:UpdateAssumeRolePolicy",
                        "sts:AssumeRole"
                    ],
                    "Resource": "arn:aws:iam::*"
                } ]
             },
           "Roles" : [ {
             "Ref": "AviatrixRoleEC2"
           } ]
        }
      },
    "CreateAviatrixAppPolicy" :
      {
         "Type" : "AWS::IAM::ManagedPolicy",
         "Properties" : {
           "ManagedPolicyName" : "aviatrix-app-policy",
           "Description" : "Policy for creating aviatrix-app-policy",
           "Path" : "/",
           "PolicyDocument" :
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ec2:CopyImage",
                          "ec2:DescribeImageAttribute",
                          "ec2:DescribeImages",
                          "ec2:ModifyImageAttribute",
                          "ec2:DescribeAccountAttributes",
                          "ec2:AssociateDhcpOptions",
                          "ec2:CreateDhcpOptions",
                          "ec2:DeleteDhcpOptions",
                          "ec2:DescribeDhcpOptions",
                          "ec2:AllocateAddress",
                          "ec2:AssociateAddress",
                          "ec2:DescribeAddresses",
                          "ec2:DescribeMovingAddresses",
                          "ec2:DisassociateAddress",
                          "ec2:MoveAddressToVpc",
                          "ec2:ReleaseAddress",
                          "ec2:RestoreAddressToClassic",
                          "ec2:AssignPrivateIpAddresses",
                          "ec2:AttachNetworkInterface",
                          "ec2:CreateNetworkInterface",
                          "ec2:DeleteNetworkInterface",
                          "ec2:DescribeNetworkInterfaceAttribute",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DetachNetworkInterface",
                          "ec2:ModifyNetworkInterfaceAttribute",
                          "ec2:ResetNetworkInterfaceAttribute",
                          "ec2:UnassignPrivateIpAddresses",
                          "ec2:DescribeInstanceAttribute",
                          "ec2:DescribeInstances",
                          "ec2:DescribeInstanceStatus",
                          "ec2:GetConsoleOutput",
                          "ec2:GetConsoleScreenshot",
                          "ec2:GetPasswordData",
                          "ec2:ModifyInstanceAttribute",
                          "ec2:MonitorInstances",
                          "ec2:RebootInstances",
                          "ec2:ReportInstanceStatus",
                          "ec2:ResetInstanceAttribute",
                          "ec2:RunInstances",
                          "ec2:StartInstances",
                          "ec2:StopInstances",
                          "ec2:TerminateInstances",
                          "ec2:UnmonitorInstances",
                          "ec2:AttachInternetGateway",
                          "ec2:CreateInternetGateway",
                          "ec2:DeleteInternetGateway",
                          "ec2:DescribeInternetGateways",
                          "ec2:DetachInternetGateway",
                          "ec2:CreateKeyPair",
                          "ec2:DeleteKeyPair",
                          "ec2:DescribeKeyPairs",
                          "ec2:ImportKeyPair",
                          "ec2:DescribeAvailabilityZones",
                          "ec2:DescribeRegions",
                          "ec2:DescribeIdentityIdFormat",
                          "ec2:DescribeIdFormat",
                          "ec2:ModifyIdentityIdFormat",
                          "ec2:ModifyIdFormat",
                          "ec2:AssociateRouteTable",
                          "ec2:CreateRoute",
                          "ec2:CreateRouteTable",
                          "ec2:DeleteRoute",
                          "ec2:DeleteRouteTable",
                          "ec2:DescribeRouteTables",
                          "ec2:DisableVgwRoutePropagation",
                          "ec2:DisassociateRouteTable",
                          "ec2:EnableVgwRoutePropagation",
                          "ec2:ReplaceRoute",
                          "ec2:ReplaceRouteTableAssociation",
                          "ec2:AuthorizeSecurityGroupEgress",
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:CreateSecurityGroup",
                          "ec2:DeleteSecurityGroup",
                          "ec2:DescribeSecurityGroupReferences",
                          "ec2:DescribeSecurityGroups",
                          "ec2:DescribeStaleSecurityGroups",
                          "ec2:RevokeSecurityGroupEgress",
                          "ec2:RevokeSecurityGroupIngress",
                          "ec2:CreateSubnet",
                          "ec2:DeleteSubnet",
                          "ec2:DescribeSubnets",
                          "ec2:ModifySubnetAttribute",
                          "ec2:CreateTags",
                          "ec2:DeleteTags",
                          "ec2:DescribeTags",
                          "ec2:CreateVpc",
                          "ec2:DeleteVpc",
                          "ec2:DescribeVpcAttribute",
                          "ec2:DescribeVpcs",
                          "ec2:ModifyVpcAttribute",
                          "ec2:AttachVpnGateway",
                          "ec2:CreateVpnGateway",
                          "ec2:DeleteVpnGateway",
                          "ec2:DescribeVpnGateways",
                          "ec2:DetachVpnGateway",
                          "ec2:DescribeNetworkAcls",
                          "ec2:AcceptVpcPeeringConnection",
                          "ec2:CreateVpcPeeringConnection",
                          "ec2:DeleteVpcPeeringConnection",
                          "ec2:DescribeVpcPeeringConnections",
                          "ec2:ModifyVpcPeeringConnectionOptions",
                          "ec2:RejectVpcPeeringConnection"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                          "elasticloadbalancing:AttachLoadBalancerToSubnets",
                          "elasticloadbalancing:ConfigureHealthCheck",
                          "elasticloadbalancing:CreateLoadBalancer",
                          "elasticloadbalancing:CreateLoadBalancerPolicy",
                          "elasticloadbalancing:DeleteLoadBalancer",
                          "elasticloadbalancing:DeleteLoadBalancerPolicy",
                          "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                          "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                          "elasticloadbalancing:DescribeInstanceHealth",
                          "elasticloadbalancing:DescribeLoadBalancers",
                          "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
                          "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
                          "elasticloadbalancing:ModifyLoadBalancerAttributes",
                          "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                          "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                          "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "route53:ChangeResourceRecordSets",
                          "route53:CreateHostedZone",
                          "route53:DeleteHostedZone",
                          "route53:GetHostedZone",
                          "route53:ListHostedZones",
                          "route53:ListResourceRecordSets"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:CreateBucket",
                          "s3:DeleteBucket",
                          "s3:ListBucket",
                          "s3:GetObject",
                          "s3:PutObject"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:DeleteAlarms",
                          "cloudwatch:PutMetricAlarm"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "sns:ListTopics",
                          "sns:CreateTopic",
                          "sns:DeleteTopic",
                          "sns:Subscribe",
                          "sns:Unsubscribe"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "sqs:AddPermission",
                          "sqs:ChangeMessageVisibility",
                          "sqs:CreateQueue",
                          "sqs:DeleteMessage",
                          "sqs:DeleteQueue",
                          "sqs:GetQueueUrl",
                          "sqs:ListQueues",
                          "sqs:PurgeQueue",
                          "sqs:ReceiveMessage",
                          "sqs:RemovePermission",
                          "sqs:SendMessage",
                          "sqs:GetQueueAttributes",
                          "sqs:SetQueueAttributes"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "iam:UpdateAssumeRolePolicy",
                          "sts:AssumeRole"
                      ],
                      "Resource": "arn:aws:iam::*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "iam:UpdateAssumeRolePolicy",
                          "iam:PassRole",
                          "iam:ListRoles",
                          "iam:GetRolePolicy",
                          "iam:AddRoleToInstanceProfile",
                          "iam:CreateInstanceProfile",
                          "iam:GetInstanceProfile",
                          "iam:GetRole",
                          "iam:ListInstanceProfiles",
                          "iam:ListInstanceProfilesForRole",
                          "iam:ListRoles",
                          "iam:DeleteInstanceProfile",
                          "iam:RemoveRoleFromInstanceProfile"
                      ],
                      "Resource": "*"
                  }
              ]
            },
           "Roles" : [ {
              "Ref": "AviatrixRoleApp"
           } ]
         }
       },

       "AviatrixInstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ { "Ref": "AviatrixRoleEC2" } ]
         }
       },
       "AviatrixController" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
               "ImageId" : "ami-03558e63",
               "KeyName" : { "Ref": "KeyNameParam" },
               "InstanceType": "t2.medium",
               "IamInstanceProfile" : {"Ref":  "AviatrixInstanceProfile" },
               "AvailabilityZone": { "Ref": "AvailabilityZoneParam" },
               "NetworkInterfaces": [ {
                  "AssociatePublicIpAddress": "true",
                  "DeviceIndex": "0",
                  "GroupSet": [{ "Ref" : "AviatrixSG" }],
                  "SubnetId": { "Ref" : "SubnetParam" }
                } ],
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "AviatrixController"
                },
                {
                  "Key": "Project",
                  "Value": "Aviatrix"
                }
                ]
            }
        },
        "AviatrixSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
              "VpcId": { "Ref": "VPCParam" },
              "SecurityGroupIngress": [ {
                "IpProtocol": "tcp",
                "CidrIp": "0.0.0.0/0",
                "FromPort": "443",
                "ToPort": "443"
              } ],
              "Tags": [
              {
                "Key": "Name",
                "Value": "AviatrixSecurityGroup"
              },
              {
                "Key": "Project",
                "Value": "Aviatrix"
              }
              ]
            }
         }
  }
}
